<?xml version="1.0"?>

<document>

  <properties>
    <author email="bob@eng.werken.com">bob mcwhirter</author>
    <title>Workflow Net Idioms</title>
  </properties>

  <body>
    <section name="Workflow Net Idioms">

      <p>
      Various structural idioms occur frequently when defining a
      process using a workflow net.  Several of the idioms directly
      relate to the provability of sound workflow nets, while others
      are simply convenient standardized modelling constructs.
      </p>

      <subsection name="Separate Work and Decisions">

        <p>
        It is wise to separate work and any decisions based upon
        the work into multiple nodes.  The reasoning is that the
        work occurs independant of any action taken based upon
        the results of the work.  For example, the act of validating
        an application for credit is not directly related to the
        action taken once validation has completed.
        </p>

        <p>
        The <b>work</b>  task is modelled as a normal transition
        the performs a task and deposits the results into the
        <b>case attributes</b>.  The decision is modelled as
        expressions on the arcs leading away from post-task
        place.
        </p>

        <p>
        <img src="images/separate-work-and-decision.png"/>
        </p>

        <p>
        Using the <b>fundamental</b> process definition syntax,
        this idiom would be modelled as:
        </p>

<source><![CDATA[
<place id="validation.required"/>
<place id="validation.performed"/>

<transition id="validate">
  <input from="validation.required"/>
  <output  to="validation.performed"/>
  <task>
    ...
  </task>
</transition>

<transition id="handle.valid">
  <input from="validation.performed" test="${isValid}"/>
  <output  to="wherever"/>
  <task>
    ..
  </task>
</transition>

<transition id="handle.invalid">
  <input from="validation.performed test="${not(isValid)}"/>
  <output  to="wherever"/>
  <task>
    ..
  </task>
</transition>
]]></source>
      </subsection>

      <subsection name="Model Deadlines Explicitly">

        <p>
        Certain processes require an event to occur within a certain
        amount of time, and if it does not, certain other actions
        must be taken.  A deadline or expiration can be modelled using
        an additional transition fed by the same place, but triggered
        with by a timeout.  If the normal execution path is followed,
        the token will be consumed before the timeout fires.  Otherwise,
        the time-out transition will fire when the deadline is reached. 
        </p>

        <p>
        <img src="images/timeouts.png"/>
        </p>

<source><![CDATA[
<place id="requires.response"/>

<transition id="receive.response">
  <input from="validation.required"/>
  <output  to="wherever"/>
  <message-trigger type="ResponseMsg"/>
  <task>
    ...
  </task>
</transition>

<transition id="receive.timeout">
  <input from="requires.response">
  <output  to="wherever"/>
  <time-trigger interval="2d"/>
  <task>
    ..
  </task>
</transition>
]]></source>

      </subsection>
    </section>
  </body>
</document>

